import React from "react";
import { BsFacebook, BsInstagram, BsLinkedin } from "react-icons/bs";
import { FaSlack, FaTiktok } from "react-icons/fa";
import { Helmet } from "react-helmet";
import "../../../page/PostStyles.css";
import { FaSquareXTwitter } from "react-icons/fa6";
import CommentsSection from "../../../../Blog/components/CommentsSection";
import OptimizedImage from "../../../../../components/OptimizedImage";

const CssGridFlexbox: React.FC = () => {
  const currentUrl = window.location.href;
  const postId = 17;

  return (
    <div className="blog-post">
      <Helmet>
        <title>
          Estrategias avanzadas para dominar el layout en CSS: Combinando Grid y
          Flexbox | FemCoders Club
        </title>
        <meta
          name="description"
          content="Aprende a combinar CSS Grid y Flexbox estrat√©gicamente para crear layouts modernos, complejos y responsivos. Descubre 5 estrategias eficaces y ejemplos pr√°cticos."
        />
        <meta
          name="keywords"
          content="CSS Grid, Flexbox, combinaci√≥n Grid y Flexbox, layout web, frontend, dise√±o web, femcoders club, desarrollo web para mujeres, CSS avanzado, responsive design"
        />

        {/* Metadatos can√≥nicos */}
        <link
          rel="canonical"
          href="https://www.femcodersclub.com/recursos/css/css-grid-flexbox"
        />

        {/* Open Graph para compartir en redes sociales */}
        <meta property="og:type" content="article" />
        <meta
          property="og:title"
          content="Estrategias avanzadas para dominar el layout en CSS: Combinando Grid y Flexbox"
        />
        <meta
          property="og:description"
          content="Aprende a combinar CSS Grid y Flexbox estrat√©gicamente para crear layouts modernos, complejos y responsivos. Descubre 5 estrategias eficaces y ejemplos pr√°cticos."
        />
        <meta
          property="og:url"
          content="https://www.femcodersclub.com/recursos/css/css-grid-flexbox"
        />
        <meta
          property="og:image"
          content="https://www.femcodersclub.com/public-optimized/desktop/assets/css/CssGridFlexbox.webp"
        />
        <meta property="og:site_name" content="FemCoders Club" />

        {/* Twitter Card */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta
          name="twitter:title"
          content="Estrategias avanzadas para dominar el layout en CSS: Combinando Grid y Flexbox"
        />
        <meta
          name="twitter:description"
          content="Gu√≠a completa para combinar Grid y Flexbox: 5 estrategias clave con ejemplos pr√°cticos para dise√±adoras y desarrolladoras web."
        />
        <meta
          name="twitter:image"
          content="https://www.femcodersclub.com/public-optimized/desktop/assets/css/CssGridFlexbox.webp"
        />

        {/* Metadatos de art√≠culo */}
        <meta
          property="article:published_time"
          content="2025-04-27T12:00:00Z"
        />
        <meta property="article:author" content="Irina Ichim" />
        <meta property="article:section" content="Desarrollo Web" />
        <meta property="article:tag" content="CSS" />
        <meta property="article:tag" content="Grid" />
        <meta property="article:tag" content="Flexbox" />
        <meta property="article:tag" content="Frontend" />

        {/* Metadatos adicionales */}
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="robots" content="index, follow" />
        <meta name="language" content="Spanish" />
      </Helmet>

      <div className="post-image-container">
        <picture>
          <source
            srcSet="/public-optimized/mobile/assets/css/CssGridFlexbox.webp"
            media="(max-width: 768px)"
          />
          <source
            srcSet="/public-optimized/desktop/assets/css/CssGridFlexbox.webp"
            media="(min-width: 769px)"
          />
          <img
            src="/public-optimized/desktop/assets/css/CssGridFlexbox.webp"
            alt="Combinaci√≥n de CSS Grid y Flexbox - Estructura moderna de layout web"
            className="blog-post-image"
            loading="lazy"
          />
        </picture>
      </div>

      <h1 className="blog-post-title">
        Estrategias avanzadas para dominar el layout en CSS: Combinando Grid y
        Flexbox
      </h1>

      <div className="social-share">
        <div className="share-buttons">
          <a
            href={`https://www.facebook.com/sharer/sharer.php?u=${currentUrl}`}
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Compartir en Facebook"
          >
            <BsFacebook className="social-icon" />
          </a>
          <a
            href={`https://www.instagram.com/?url=${currentUrl}`}
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Compartir en Instagram"
          >
            <BsInstagram className="social-icon" />
          </a>
          <a
            href={`https://www.linkedin.com/sharing/share-offsite/?url=${currentUrl}`}
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Compartir en LinkedIn"
          >
            <BsLinkedin className="social-icon" />
          </a>
          <a
            href={`https://twitter.com/share?url=${currentUrl}`}
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Compartir este post en Twitter"
          >
            <FaSquareXTwitter className="social-icon" />
          </a>
          <a
            href={`https://www.tiktok.com/share?url=${currentUrl}`}
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Compartir en TikTok"
          >
            <FaTiktok className="social-icon" />
          </a>
          <a
            href="https://communityinviter.com/apps/femcodersclub/femcoders-club"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Unirse a Slack"
          >
            <FaSlack className="social-icon" />
          </a>
        </div>
      </div>

      <div className="intro-text">
        <p>
          En nuestros art√≠culos anteriores, exploramos en profundidad{" "}
          <strong>
            {" "}
            üîó
            <a
              href="https://www.femcodersclub.com/recursos/css/flexbox "
              className="highlight-link"
            >
              Flexbox
            </a>
          </strong>{" "}
          y{" "}
          <strong>
            {" "}
            üîó
            <a
              href="https://www.femcodersclub.com/recursos/css/css-grid"
              className="highlight-link"
            >
              CSS Grid
            </a>
          </strong>{" "}
          como tecnolog√≠as individuales. Hoy, daremos un paso m√°s y
          descubriremos c√≥mo combinar ambas herramientas para crear layouts
          modernos, complejos y responsivos.
        </p>
        <p>
          Para este art√≠culo, hemos creado un proyecto pr√°ctico que puedes
          explorar en nuestro{" "}
          <strong>
            üîó
            <a
              href="https://github.com/femcodersclub/css-grid-flexbox-layouts"
              target="_blank"
              rel="noopener noreferrer"
              className="highlight-link"
            >
              repositorio de GitHub
            </a>
          </strong>
          . Te invitamos a clonarlo y experimentar con √©l mientras lees este
          post.
        </p>
      </div>

      <div className="highlight-box">
        <h2>¬øPor qu√© combinar Grid y Flexbox?</h2>
        <p>
          Grid y Flexbox no son tecnolog√≠as competidoras, sino complementarias.
          Cada una tiene sus fortalezas espec√≠ficas:
        </p>
        <br />
        <h3>CSS Grid es ideal para:</h3>
        <ul>
          <li>Layouts bidimensionales (filas y columnas)</li>
          <li>Estructuras macro y dise√±os de p√°gina completa</li>
          <li>Posicionamiento preciso de elementos</li>
          <li>Alineaci√≥n de elementos en ambos ejes simult√°neamente</li>
        </ul>

        <h3>Flexbox brilla en:</h3>
        <ul>
          <li>Distribuciones unidimensionales (filas O columnas)</li>
          <li>Alineaci√≥n flexible dentro de un contenedor</li>
          <li>Espaciado din√°mico entre elementos</li>
          <li>Adaptaci√≥n al contenido</li>
        </ul>

        <p>
          La clave para dominar el layout en CSS moderno es entender{" "}
          <strong>cu√°ndo usar cada tecnolog√≠a</strong> y c√≥mo combinarlas
          estrat√©gicamente.
        </p>
      </div>

      <div className="highlight-box">
        <h2>5 Estrategias efectivas para combinar Grid y Flexbox</h2>
        <p>
          A continuaci√≥n, exploraremos 5 estrategias pr√°cticas para combinar
          ambas tecnolog√≠as, todas implementadas en nuestro proyecto de ejemplo.
        </p>
        <br />
        <h3>
          1.: Grid para la estructura general, Flexbox para los componentes
          internos
        </h3>
        <p>
          {" "}
          En esta estrategia usamos <strong>CSS Grid</strong> para construir el
          layout general (como la distribuci√≥n de tarjetas) y{" "}
          <strong>Flexbox</strong> dentro de cada tarjeta para alinear sus
          elementos.{" "}
        </p>{" "}
        <p>Lo aplicamos as√≠ en nuestro proyecto:</p>{" "}
        <div
          className="example-image"
          style={{ textAlign: "center", margin: "20px 0" }}
        >
          {" "}
          <OptimizedImage
  src="assets/css/strategy1.png"
  alt="Estrategia 1: Grid para layout y Flexbox para contenido"
  className="rounded-lg shadow-md"
  loading="lazy"
/>{" "}
        </div>{" "}
        <ul>
          {" "}
          <li>
            <strong>.features-grid</strong>: usa <code>grid</code> para
            distribuir las tarjetas.
          </li>{" "}
          <li>
            <strong>.feature-card</strong>: usa <code>flex</code> para alinear
            texto e iconos verticalmente.
          </li>{" "}
        </ul>{" "}
        <pre className="code-block bg3">
          {" "}
          {`/* Grid para distribuir tarjetas */ .features-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: var(--space-lg); } /* Flexbox en tarjetas individuales */ .feature-card { display: flex; flex-direction: column; align-items: center; padding: var(--space-lg); }`}{" "}
        </pre>{" "}
        <p style={{ textAlign: "center", marginTop: "15px" }}>
          {" "}
          <a
            href="https://github.com/femcodersclub/css-grid-flexbox-layouts/blob/main/css/combined.css"
            target="_blank"
            rel="noopener noreferrer"
            className="highlight-link"
          >
            {" "}
            üîó Ver c√≥digo en GitHub{" "}
          </a>{" "}
        </p>
        <br />
        <h3>
          2.: Grid para posicionamiento asim√©trico, Flexbox para alineaci√≥n
          interna
        </h3>
        <p>
          {" "}
          Aqu√≠ usamos <strong>Grid</strong> para crear una tarjeta que ocupa m√°s
          espacio (ideal para destacar contenido) y <strong>Flexbox</strong>{" "}
          para alinear el contenido dentro de esa tarjeta.{" "}
        </p>{" "}
        <div
          className="example-image"
          style={{ textAlign: "center", margin: "20px 0" }}
        >
          {" "}
          <OptimizedImage
  src="assets/css/strategy2.png"
  alt="Estrategia 2: tarjeta asim√©trica con Grid y Flexbox"
  className="rounded-lg shadow-md"
  loading="lazy"
/>
{" "}
        </div>{" "}
        <ul>
          {" "}
          <li>
            <strong>.examples-grid</strong>: layout de dos columnas con Grid.
          </li>{" "}
          <li>
            <strong>.example-card.large</strong>: tarjeta que ocupa dos
            columnas.
          </li>{" "}
          <li>
            <strong>.example-content</strong>: contenido alineado con Flexbox.
          </li>{" "}
        </ul>{" "}
        <pre className="code-block bg3">
          {" "}
          {`.example-card.large { grid-column: span 2; display: grid; grid-template-columns: 1fr 1fr; grid-template-areas: "image content"; } .example-card.large .example-content { grid-area: content; display: flex; flex-direction: column; justify-content: center; }`}{" "}
        </pre>{" "}
        <p style={{ textAlign: "center", marginTop: "15px" }}>
          {" "}
          <a
            href="https://github.com/femcodersclub/css-grid-flexbox-layouts/blob/main/css/combined.css"
            target="_blank"
            rel="noopener noreferrer"
            className="highlight-link"
          >
            {" "}
            üîó Ver implementaci√≥n en GitHub{" "}
          </a>{" "}
        </p>
        <br />
        <h3>3.: Grid con √°reas nombradas y Flexbox para componentes</h3>

<p>
  Una de las grandes ventajas de <strong>CSS Grid</strong> es que podemos definir <strong>√°reas de contenido</strong> f√°cilmente, haciendo que los layouts sean m√°s claros y organizados.
</p>

<p>
  En nuestro proyecto aplicamos esta t√©cnica en la <strong>secci√≥n principal (Hero)</strong>, combinando <strong>Grid</strong> para distribuir la imagen y el texto, y <strong>Flexbox</strong> para alinear verticalmente los elementos internos.
</p>

<div className="example-image" style={{ textAlign: "center", margin: "20px 0" }}>
<OptimizedImage
  src="assets/css/strategy3.png"
  alt="Secci√≥n Hero usando Grid y Flexbox"
  className="rounded-lg shadow-md"
  loading="lazy"
/>

</div>

<h5>üõ† Aplicaci√≥n pr√°ctica en el proyecto</h5>
<ul>
  <li>
    <code>.hero-container</code>: usa <code>grid-template-columns</code> para dividir en dos columnas (texto + imagen).
  </li>
  <li>
    <code>.hero-content</code>: usa <code>display: flex</code> para alinear el contenido (t√≠tulos, p√°rrafos y botones) en columna.
  </li>
  <li>
    El dise√±o cambia a formato vertical en m√≥viles gracias a <code>@media</code> queries.
  </li>
</ul>

<h5>üåü Fragmento de c√≥digo relevante</h5>
<pre className="code-block bg3">
{`.hero-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--space-xl);
  align-items: center;
}

.hero-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: var(--space-md);
}

@media (max-width: 768px) {
  .hero-container {
    display: flex;
    flex-direction: column;
    gap: var(--space-xl);
  }
}`}
</pre>

<p>
  Combinando Grid y Flexbox en la secci√≥n Hero conseguimos un dise√±o moderno, claro y perfectamente adaptable a m√≥viles.
</p>

<p style={{ textAlign: "center", marginTop: "15px" }}>
  <a
    href="https://github.com/femcodersclub/css-grid-flexbox-layouts/blob/main/css/combined.css"
    target="_blank"
    rel="noopener noreferrer"
    className="highlight-link"
  >
    üîó Ver implementaci√≥n real en GitHub
  </a>
</p>
<br />

        <h3>
          4.: Grid para responsividad autom√°tica, Flexbox para componentes
        </h3>
        <p>
          {" "}
          Una gran ventaja de <strong>CSS Grid</strong> es que nos permite crear
          sistemas de tarjetas adaptables sin necesidad de media queries. Para
          ello, usamos funciones como <code>auto-fill</code> junto con{" "}
          <code>minmax()</code>.{" "}
        </p>{" "}
        <p>
          {" "}
          En nuestro proyecto, la secci√≥n de <code>.features-grid</code> usa
          Grid para que las tarjetas se redistribuyan autom√°ticamente seg√∫n el
          ancho disponible. Dentro de cada tarjeta, aplicamos Flexbox para
          alinear el contenido verticalmente.{" "}
        </p>{" "}
        <pre className="code-block bg3">
          {" "}
          {`/* combined.css */ /* Grid para responsividad autom√°tica */ .features-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: var(--space-lg); } /* Flexbox dentro de cada tarjeta */ .feature-card { display: flex; flex-direction: column; align-items: center; text-align: center; padding: var(--space-lg); }`}{" "}
        </pre>{" "}
        <p>
          {" "}
          Esta combinaci√≥n hace que el layout sea fluido y adaptable,
          manteniendo una estructura limpia y centrada en cada tarjeta.{" "}
        </p>
        <br />
        <h3>5.: Intercambio de layout basado en media queries</h3>
        <p>
          {" "}
          En esta estrategia, cambiamos de Grid a Flexbox (o viceversa) seg√∫n el
          tama√±o de pantalla, lo que permite adaptar el dise√±o a diferentes
          dispositivos de forma √≥ptima.{" "}
        </p>{" "}
        <p>
          {" "}
          En la secci√≥n <code>.hero-container</code>, usamos Grid en escritorio
          para distribuir el contenido en columnas, y Flexbox en m√≥vil para
          reordenar y alinear verticalmente.{" "}
        </p>{" "}
        <pre className="code-block bg3">
          {" "}
          {`/* combined.css */ /* Desktop: Usamos Grid */ .hero-container { display: grid; grid-template-columns: 1fr 1fr; gap: var(--space-xl); align-items: center; } /* Mobile: Cambiamos a Flexbox */ @media (max-width: 768px) { .hero-container { display: flex; flex-direction: column; gap: var(--space-xl); } .hero-image { order: -1; /* Imagen arriba en m√≥viles */ } }`}{" "}
        </pre>{" "}
        <p>
          {" "}
          Esta t√©cnica mejora la experiencia del usuario en pantallas peque√±as
          sin duplicar el contenido ni complicar el HTML.{" "}
        </p>
      </div>

      <div className="highlight-box">
        <h2>Ejemplos pr√°cticos en nuestro repositorio de GitHub</h2>
        <p>
          Para que puedas ver todos estos conceptos en acci√≥n, hemos creado un
          proyecto completo en GitHub con ejemplos interactivos. Cada estrategia
          mencionada en este art√≠culo est√° implementada en este proyecto, donde
          podr√°s analizar el c√≥digo y ver c√≥mo funciona en un entorno real.
        </p>

        <h3>Lo que encontrar√°s en el repositorio:</h3>
        <ul>
          <li>
            <strong>Landing Page Completa:</strong> Una implementaci√≥n real que
            utiliza todas las estrategias mencionadas en este art√≠culo
          </li>
          <li>
            <strong>Archivos CSS organizados:</strong> <code>grid.css</code>,{" "}
            <code>flexbox.css</code> y <code>combined.css</code> muestran
            claramente c√≥mo separar y combinar ambas tecnolog√≠as
          </li>
          <li>
            <strong>Componentes reutilizables:</strong> Tarjetas, navegaci√≥n,
            secciones de caracter√≠sticas, testimonios, etc.
          </li>
          <li>
            <strong>Implementaci√≥n responsive:</strong> Adaptaci√≥n completa para
            m√≥viles, tablets y escritorio
          </li>
        </ul>

        <div className="styled-paragraph" style={{ textAlign: "center" }}>
          <span>
            <a
              href="https://github.com/femcodersclub/css-grid-flexbox-layouts"
              className="highlight underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              ‚ú® Explora el c√≥digo en GitHub üìÇ ‚ú®
            </a>
          </span>
          <br />
          <span>
            <a
              href="https://femcodersclub.github.io/css-grid-flexbox-layouts/"
              target="_blank"
              rel="noopener noreferrer"
            >
              Ver ejemplo en vivo
            </a>
          </span>
        </div>

        <h3>Estructura del proyecto</h3>
        <pre className="code-block bg3">
{`css-grid-flexbox-layouts/
‚îú‚îÄ‚îÄ index.html            # P√°gina principal (landing page)
‚îú‚îÄ‚îÄ css/                  # Carpeta de estilos CSS
‚îÇ   ‚îú‚îÄ‚îÄ styles.css        # Estilos generales y variables
‚îÇ   ‚îú‚îÄ‚îÄ grid.css          # Componentes estructurados con Grid
‚îÇ   ‚îú‚îÄ‚îÄ flexbox.css       # Componentes estructurados con Flexbox
‚îÇ   ‚îî‚îÄ‚îÄ combined.css      # Componentes combinando Grid y Flexbox
‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îî‚îÄ‚îÄ main.js           # JavaScript para interactividad b√°sica (toggle men√∫)
‚îú‚îÄ‚îÄ images/               # Im√°genes utilizadas en el proyecto
‚îú‚îÄ‚îÄ README.md             # Documentaci√≥n del proyecto
`}
</pre>
        <p>
          En el archivo <code>README.md</code> encontrar√°s instrucciones para
          clonar el repositorio y ejecutar el proyecto localmente.
        </p>
      </div>

      <div className="highlight-box">
        <h2>Ejemplo pr√°ctico: Layout moderno de landing page</h2>

        <p>
          Exploremos ahora c√≥mo aplicamos todas estas estrategias en nuestra
          landing page de ejemplo que acabamos de crear para este art√≠culo:
        </p>

        <div
          className="example-screenshot"
          style={{
            margin: "20px 0",
            textAlign: "center",
          }}
        >
          <img
            src="/public-optimized/desktop/assets/css/landing-preview.jpg"
            alt="Landing Page Preview del proyecto CSS Grid + Flexbox"
            style={{
              maxWidth: "100%",
              borderRadius: "8px",
              boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
            }}
            loading="lazy"
          />
        </div>

        <p>
          El layout de nuestra landing page se divide en las siguientes
          secciones, y en cada una hemos aplicado espec√≠ficamente las
          estrategias que acabamos de explicar:
        </p>

        <table className="framework-comparison-table">
          <thead>
            <tr>
              <th>Secci√≥n</th>
              <th>Estrategia aplicada</th>
              <th>Archivo</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                <strong>Header</strong>
              </td>
              <td>
                Flexbox para alineaci√≥n horizontal + comportamiento responsivo
              </td>
              <td>
                <code>flexbox.css</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Hero Section</strong>
              </td>
              <td>
                Grid para estructura, Flexbox para botones (Estrategia 1 y 5)
              </td>
              <td>
                <code>combined.css</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Features</strong>
              </td>
              <td>
                Grid para distribuci√≥n, Flexbox para tarjetas (Estrategia 4)
              </td>
              <td>
                <code>grid.css + flexbox.css</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Examples</strong>
              </td>
              <td>Grid asim√©trico con tarjeta expandida (Estrategia 2)</td>
              <td>
                <code>combined.css</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Testimonials</strong>
              </td>
              <td>
                Grid para estructura, Flexbox para alineaci√≥n (Estrategia 1)
              </td>
              <td>
                <code>grid.css + flexbox.css</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Contact</strong>
              </td>
              <td>Grid con √°reas nombradas (Estrategia 3)</td>
              <td>
                <code>grid.css</code>
              </td>
            </tr>
            <tr>
              <td>
                <strong>Footer</strong>
              </td>
              <td>
                Grid para macroestructura, Flexbox para grupos (Estrategia 1)
              </td>
              <td>
                <code>combined.css</code>
              </td>
            </tr>
          </tbody>
        </table>

        <p>
          Cada una de estas secciones es un ejemplo perfecto de c√≥mo elegir la
          t√©cnica adecuada seg√∫n el tipo de layout que necesitas crear,
          aprovechando las fortalezas espec√≠ficas de Grid y Flexbox.
        </p>

        <div
          style={{
            backgroundColor: "rgba(138, 43, 226, 0.1)",
            padding: "15px",
            borderRadius: "8px",
            marginTop: "20px",
            borderLeft: "4px solid var(--color-primary)",
          }}
        >
          <p style={{ margin: "0" }}>
            <strong>üí° Consejo:</strong> Al explorar el c√≥digo fuente en GitHub,
            observa c√≥mo los comentarios en cada archivo CSS explican qu√©
            estrategia se est√° aplicando y por qu√© se eligi√≥ esa aproximaci√≥n
            para cada componente espec√≠fico.
          </p>
        </div>
      </div>

      <div className="highlight-box">
  <h2>Buenas pr√°cticas para combinar Grid y Flexbox</h2>

  <p>
    A lo largo del desarrollo de este proyecto, aplicamos algunas buenas pr√°cticas esenciales que te recomendamos seguir:
  </p>

  <ol>
    <li>
      <strong>Separa las responsabilidades:</strong> Organizamos el CSS en archivos diferentes:
      <code>grid.css</code> para estructuras basadas en Grid,
      <code>flexbox.css</code> para componentes basados en Flexbox,
      y <code>combined.css</code> para combinaciones de ambos.
    </li>

    <li>
      <strong>Mant√©n una organizaci√≥n l√≥gica:</strong> Agrupamos estilos relacionados y a√±adimos comentarios explicativos para facilitar el mantenimiento del proyecto.
    </li>

    <li>
      <strong>Usa √°reas nombradas en Grid:</strong> Definir √°reas claras con <code>grid-template-areas</code> facilita la comprensi√≥n y modificaci√≥n de layouts complejos como nuestro "Holy Grail Layout".
    </li>

    <li>
      <strong>Aplica un enfoque "Mobile First":</strong> Desde el principio dise√±amos pensando en dispositivos m√≥viles, ajustando la estructura mediante media queries cuando es necesario.
    </li>

    <li>
      <strong>Utiliza variables CSS:</strong> Todas las medidas de espacio, colores y tama√±os de fuente est√°n centralizadas en <code>styles.css</code> usando variables CSS para facilitar cambios globales.
    </li>

    <li>
      <strong>Evita anidar grids innecesariamente:</strong> Combinamos Grid y Flexbox solo cuando cada uno aporta ventajas reales, evitando estructuras demasiado complicadas.
    </li>

    <li>
      <strong>Cuida la sem√°ntica HTML:</strong> La estructura de nuestro <code>index.html</code> est√° dise√±ada para mantener sentido l√≥gico incluso sin aplicar estilos, mejorando accesibilidad y SEO.
    </li>
  </ol>
</div>


      <div className="highlight-box">
        <h2>Compatibilidad con navegadores</h2>

        <h3>Tabla de compatibilidad actualizada</h3>
        <div className="table-container">
          <table className="framework-comparison-table">
            <thead>
              <tr>
                <th>Navegador</th>
                <th>CSS Grid</th>
                <th>Flexbox</th>
                <th>Combinaci√≥n</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Chrome</td>
                <td>57+</td>
                <td>29+</td>
                <td>Completo</td>
              </tr>
              <tr>
                <td>Firefox</td>
                <td>52+</td>
                <td>28+</td>
                <td>Completo</td>
              </tr>
              <tr>
                <td>Safari</td>
                <td>10.1+</td>
                <td>9+</td>
                <td>Completo</td>
              </tr>
              <tr>
                <td>Edge</td>
                <td>16+</td>
                <td>12+</td>
                <td>Completo</td>
              </tr>
              <tr>
                <td>Opera</td>
                <td>44+</td>
                <td>28+</td>
                <td>Completo</td>
              </tr>
              <tr>
                <td>iOS Safari</td>
                <td>10.3+</td>
                <td>9.2+</td>
                <td>Completo</td>
              </tr>
              <tr>
                <td>Internet Explorer</td>
                <td>No soportado</td>
                <td>11 (parcial)</td>
                <td>No recomendado</td>
              </tr>
            </tbody>
          </table>
        </div>

        <h3>Estrategias de fallback</h3>
        <p>Para garantizar la compatibilidad con navegadores m√°s antiguos:</p>

        <pre className="code-block bg3">
          {`/* Fallback para navegadores que no soportan Grid */
.container {
  display: flex;
  flex-wrap: wrap;
}

/* Versi√≥n con Grid si es compatible */
@supports (display: grid) {
  .container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }
}`}
        </pre>
      </div>

      <div className="highlight-box">
        <h2>Conclusi√≥n: Lo mejor de ambos mundos</h2>

        <p>
          CSS Grid y Flexbox son herramientas poderosas que, cuando se combinan
          estrat√©gicamente como lo hemos demostrado en nuestro proyecto, ofrecen
          infinitas posibilidades para crear layouts web modernos, responsivos y
          mantenibles.
        </p>

        <p>
          En este post hemos explorado 5 estrategias clave para combinar ambas
          tecnolog√≠as, y las hemos implementado todas en nuestro proyecto de
          ejemplo. Te animamos a clonar el repositorio y examinar el c√≥digo para
          ver c√≥mo cada estrategia funciona en un entorno real.
        </p>

       <br/>

        <h3>Pr√≥ximos pasos:</h3>
        <ol>
          <li>
            Clona el{" "}
            <a
              href="https://github.com/femcodersclub/css-grid-flexbox-layouts"
              target="_blank"
              rel="noopener noreferrer"
              className="highlight-link"
            >
              repositorio de GitHub
            </a>
          </li>
          <li>
            Examina la estructura de archivos y los comentarios explicativos
          </li>
          <li>
            Prueba la{" "}
            <a
              href="https://femcodersclub.github.io/css-grid-flexbox-layouts/"
              target="_blank"
              rel="noopener noreferrer"
              className="highlight-link"
            >
              demo en vivo
            </a>{" "}
            y adapta tu navegador a diferentes tama√±os
          </li>
          <li>
            Prueba a modificar el c√≥digo para crear tus propias variaciones
          </li>
        </ol>
<br/>
<h2>Recursos adicionales:</h2>
<ul>
  <li>
    <a
      href="https://www.femcodersclub.com/recursos/css/flexbox"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      Gu√≠a completa de Flexbox
    </a>
  </li>
  <li>
    <a
      href="https://www.femcodersclub.com/recursos/css/css-grid"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      Gu√≠a completa de CSS Grid
    </a>
  </li>
  <li>
    <a
      href="https://github.com/femcodersclub/css-grid-flexbox-layouts"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      Repositorio del proyecto
    </a>
  </li>
  <li>
    <a
      href="https://css-tricks.com/snippets/css/complete-guide-grid/"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      CSS Grid Cheatsheet de CSS-Tricks
    </a>
  </li>
  <li>
    <a
      href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      Flexbox Cheatsheet de CSS-Tricks
    </a>
  </li>
  <li>
    <a
      href="https://layout.bradwoods.io/"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      Grid Layout Generator (herramienta visual)
    </a>
  </li>
  <li>
    <a
      href="https://the-echoplex.net/flexyboxes/"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      Flexbox Layout Generator (herramienta visual)
    </a>
  </li>
  <li>
    <a
      href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      MDN Web Docs ‚Äì CSS Grid
    </a>
  </li>
  <li>
    <a
      href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout"
      target="_blank"
      rel="noopener noreferrer"
      className="highlight-link"
    >
      MDN Web Docs ‚Äì Flexbox
    </a>
  </li>
</ul>


        <div
          style={{
            backgroundColor: "rgba(71, 55, 187, 0.1)",
            padding: "20px",
            borderRadius: "10px",
            textAlign: "center",
            margin: "30px 0",
            borderLeft: "5px solid #4737bb",
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
          }}
        >
          <h3 style={{ color: "#6d2c95", marginTop: 0, fontSize: "1.8rem" }}>
            ¬øTe animas a contribuir con tu propio ejemplo? üí°
          </h3>
          <p
            style={{ fontSize: "18px", marginBottom: "15px", color: "#2a2170" }}
          >
            Haz un <strong>Pull Request</strong> a nuestro repositorio y a√±ade
            tu ejemplo creativo al proyecto
          </p>
          <a
            href="https://github.com/femcodersclub/css-grid-flexbox-layouts/pulls"
            target="_blank"
            rel="noopener noreferrer"
            style={{
              display: "inline-block",
              backgroundColor: "#4737bb",
              color: "white",
              padding: "10px 20px",
              borderRadius: "5px",
              textDecoration: "none",
              fontWeight: "bold",
              fontSize: "16px",
              transition: "background-color 0.3s ease, transform 0.3s ease",
            }}
          >
            üöÄ Contribuir al proyecto
          </a>
          <p
            style={{
              fontSize: "20px",
              fontWeight: "bold",
              marginTop: "15px",
              marginBottom: 0,
              color: "#2a2170",
            }}
          >
            ¬°Hagamos crecer juntas la colecci√≥n de ejemplos! üí™
          </p>
        </div>
      </div>

      <div className="author-info">
        <p>
          Escrito por: <strong>Irina Ichim</strong>
        </p>
        <p>Co-fundadora de FemCoders Club</p>
        <p>
          Fecha de publicaci√≥n: <strong>27 de abril, 2025</strong>
        </p>
      </div>

      <div className="back-to-blog-container">
        <a href="/blog" className="back-to-blog">
          Volver al Blog
        </a>
      </div>

      <CommentsSection postId={postId} />
    </div>
  );
};

export default CssGridFlexbox;
